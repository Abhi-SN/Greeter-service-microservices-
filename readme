
# Full-Stack Go Microservices Application

A containerized full-stack microservice architecture built with Go, featuring secure authentication, user profiles, a protected "greeter" service, a shared PostgreSQL database, and a simple frontend. This project demonstrates modern RESTful backend design, JWT security, and agnostic service-to-service communication.

## Features

- **Authentication Service:** User registration & login, JWT token issuance.
- **User Service:** Stores and retrieves user profile information.
- **Greeter Service:** Returns protected, personalized greetings.
- **Frontend:** Clean SPA for form submissions and secure interaction.
- **Persistence:** PostgreSQL database for users and profiles.
- **Security:** JWT-based auth, CORS controlled.
- **Dockerized:** All components containerized and managed via Docker Compose.



## Directory Structure

```
integrated-project/
├── auth-service/
│   ├── main.go
│   └── Dockerfile
├── greeter-service/
│   ├── main.go
│   └── Dockerfile
├── user-service/
│   ├── main.go
│   └── Dockerfile
├── frontend/
│   ├── index.html
│   ├── nginx.conf
│   └── Dockerfile
└── docker-compose.yml
```

## Prerequisites

- **Go** 1.22 or later
- **Docker & Docker Compose**

## Getting Started

1. **Clone the repository:**
   ```bash
   git clone https://github.com/your-username/integrated-project.git
   cd integrated-project
   ```

2. **Install Go dependencies:**
   ```bash
   cd auth-service && go mod tidy
   cd ../user-service && go mod tidy
   cd ../greeter-service && go mod tidy
   ```

3. **Build and start services:**
   ```bash
   docker-compose up --build
   ```

4. **Open in browser:**
   ```
   http://localhost:3000
   ```

## Usage

### Via the Web Frontend
- **Register:** Complete the registration form, then click "Register".
- **Login:** Enter credentials, click "Login".
- **Get Greeting:** Click "Get Protected Greeting" after logging in.

### Via API (Postman/cURL)
- **Register:**  
  `POST http://localhost:8080/register`  
  Body:  
  ```json
  {
    "username": "xyz",
    "password": "abc",
    "full_name": "Your Name",
    "email": "you@example.com"
  }
  ```
- **Login:**  
  `POST http://localhost:8080/login`  
  ```json
  {
    "username": "xyz",
    "password": "abc"
  }
  ```
- **Get Greeting:**  
  `GET http://localhost:8081/greet`  
  Header: `Authorization: Bearer `

## Flows

### Registration

1. Browser sends data → frontend → auth-service → inserts to DB → notifies user-service for profile → profile stored in DB.

### Login

1. Browser submits credentials → frontend → auth-service → verifies in DB → returns JWT.

### Protected Greeting

1. Browser requests greeting (JWT provided) → frontend → greeter-service → JWT validated → username extracted → greeter-service calls user-service → user profile returned → greeting constructed and returned to frontend.


