# Full-Stack Go Microservices Application

This project is a fully containerized, end-to-end microservices architecture built with Go. It demonstrates secure authentication, user profiles, and a personalized "greeter" service. 
All services are orchestrated using Docker Compose and use PostgreSQL for persistence. The frontend, based on Nginx and JavaScript, provides a simple web interface to interact with the system.

## 🚀 Features

- **Authentication Service** - Secure registration and login, JWT token issuance
- **User Service** - User profile management
- **Greeter Service** - Protected greeting using validated user identity
- **PostgreSQL** - Central relational database for users and profiles
- **JWT-based Security** - Safe authentication and authorization between services
- **Dockerized** - All components containerized, easy to run locally or deploy
- **Simple Frontend** - Clean UI for registration, login, and greeting retrieval

## 🧩 Architecture Diagram

```
[Frontend]
  |   \
  |    -----> [Auth Service] --(writes to)--> [PostgreSQL DB]
  |              |               \
  |              |                ---> [User Service] --(reads/writes to)--> [PostgreSQL DB]
  |              |
  |               \----> [Greeter Service] ----> [User Service]
  |                                   |
 (Sends JWT for Authorization)        |
                                      \
                                         (Obtains Profile Data)
```

## 🗂 Directory Structure

```
integrated-project/
│
├── auth-service/
│   ├── main.go
│   └── Dockerfile
│
├── greeter-service/
│   ├── main.go
│   └── Dockerfile
│
├── user-service/
│   ├── main.go
│   └── Dockerfile
│
├── frontend/
│   ├── index.html
│   ├── nginx.conf
│   └── Dockerfile
│
└── docker-compose.yml
```

## 🛠 Prerequisites

- **Go** (1.22+)
- **Docker & Docker Compose**

## 🚦 How to Run the Application

1. **Clone this repository** and navigate to the project root.

2. **Initialize dependencies** for each Go service:
    ```bash
    cd auth-service && go mod tidy
    cd ../user-service && go mod tidy
    cd ../greeter-service && go mod tidy
    ```

3. **Build and run all containers:**
    ```bash
    docker-compose up --build
    ```
   This launches PostgreSQL, the three Go microservices, and the Nginx-based frontend.

4. **Visit the app in your browser:**
    ```
    http://localhost:3000
    ```

## 🧑💻 How to Use

### Using the Web Frontend

- **Register:** Complete the form with username, password, full name, and email. Click "Register".
- **Login:** Enter credentials to retrieve your JWT. A success message confirms storage of the token.
- **Get Greeting:** Click "Get Protected Greeting" — the frontend fetches a personalized greeting using your JWT.

### Using Postman or cURL

- **Register:**  
  `POST http://localhost:8080/register` with JSON body:
  ```json
  {
    "username": "youruser",
    "password": "yourpass",
    "full_name": "Your Name",
    "email": "youremail@example.com"
  }
  ```

- **Login:**  
  `POST http://localhost:8080/login` with JSON:
  ```json
  {
    "username": "youruser",
    "password": "yourpass"
  }
  ```

- **Get Greeting:**  
  `GET http://localhost:8081/greet`  
  Add header:  
  `Authorization: Bearer `

## 🏗 Architecture Flow

### 1. User Registration

```
[Browser] → [Frontend] → [Auth-Service] → [PostgreSQL DB]
                     ↘
                      [User-Service] → [PostgreSQL DB]
```
- **1.** User submits form on frontend.
- **2.** Frontend issues POST to `/register` on Auth-Service.
- **3.** Auth-Service hashes password, stores credentials in DB.
- **4.** Auth-Service posts profile data to User-Service.
- **5.** User-Service writes profile to DB.

### 2. Login & JWT Retrieval

```
[Browser] → [Frontend] → [Auth-Service] → [PostgreSQL DB] → [Frontend]
```
- **1.** User submits login form.
- **2.** Frontend posts data to `/login`.
- **3.** Auth-Service verifies credentials, issues JWT.
- **4.** Frontend stores JWT for future requests.

### 3. Protected Greeting

```
[Browser] → [Frontend] → [Greeter-Service] (JWT)
                     ↘
                      [User-Service] → [PostgreSQL DB]
```
- **1.** User clicks "Get Greeting".
- **2.** Frontend GETs `/greet` with JWT to Greeter-Service.
- **3.** Greeter-Service verifies JWT, extracts username.
- **4.** Greeter-Service requests profile from User-Service.
- **5.** User-Service fetches profile from DB.
- **6.** Greeter-Service composes personalized greeting.

## 📂 Example Requests

#### Register User

```bash
curl -X POST http://localhost:8080/register \
-H "Content-Type: application/json" \
-d '{"username":"johndoe", "password":"secret", "full_name":"John Doe", "email":"john@example.com"}'
```

#### Login

```bash
curl -X POST http://localhost:8080/login \
-H "Content-Type: application/json" \
-d '{"username":"johndoe", "password":"secret"}'
```

#### Get Protected Greeting (replace ``)

```bash
curl -X GET http://localhost:8081/greet \
-H "Authorization: Bearer "
```

